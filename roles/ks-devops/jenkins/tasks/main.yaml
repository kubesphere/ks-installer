---
- name: ks-devops | Getting jenkins installation files
  copy:
    src: "jenkins"
    dest: "{{ kubesphere_dir }}/"


- name: Jenkins | Check jenkins status
  shell: >
    {{ bin_dir }}/kubectl get deploy -n kubesphere-devops-system ks-jenkins
  register: jenkins_status
  failed_when: false

- import_tasks: get_old_config.yaml
  when:
    - jenkins_status.rc == 0

- block:
  - name: Jenkins | Getting sonarqube host
    shell: >
      {{ bin_dir }}/kubectl get cm -n kubesphere-system kubesphere-config -o jsonpath='{.data.kubesphere\.yaml}' | grep "sonarQube:" -A 2 | grep "host" | awk '{print $2}'
    register: sonarqube_host

  - name: Jenkins | Getting sonarqube token
    shell: >
      {{ bin_dir }}/kubectl get cm -n kubesphere-system kubesphere-config -o jsonpath='{.data.kubesphere\.yaml}' | grep "sonarQube:" -A 2 | grep "token" | awk '{print $2}'
    register: sonarqube_token
  when:
    - devops.sonarqube is not defined

- set_fact:
    sonarQubeHost: "{{ sonarqube_host.stdout }}"
    sonarQubeToken: "{{ sonarqube_token.stdout }}"
  when: 
    - sonarqube_host is defined and sonarqube_host.stdout is defined and sonarqube_host.stdout != ""
    - sonarqube_token is defined and sonarqube_token.stdout is defined and sonarqube_token.stdout != ""

- set_fact:
    sonarQubeHost: "{{ devops.sonarqube.externalSonarUrl }}"
    sonarQubeToken: "{{ devops.sonarqube.externalSonarToken }}"
  when: 
    - devops.sonarqube is defined
    - devops.sonarqube.externalSonarUrl is defined
    - devops.sonarqube.externalSonarToken is defined

- name: Jenkins | Creating manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/jenkins/{{ item.file }}"
  with_items:
    - { name: custom-values-jenkins, file: custom-values-jenkins.yaml }
    - { name: jenkins-casc-config, file: jenkins-casc-config.yml }
    - { name: jenkins-agent-config, file: jenkins-agent-config.yaml}


- name: Jenkins | Configure Jenkins host and port
  shell: >
    {{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/jenkins/jenkins-casc-config.yml --namespace kubesphere-devops-system


- name: Jenkins | Create Jenkins Agent Config File
  shell: >
    {{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/jenkins/jenkins-agent-config.yaml --namespace kubesphere-devops-system


- name: Jenkins | Deploy Jenkins
  shell: >
    {{ bin_dir }}/helm upgrade --install ks-jenkins {{ kubesphere_dir }}/jenkins/jenkins
    -f {{ kubesphere_dir }}/jenkins/custom-values-jenkins.yaml
    --namespace kubesphere-devops-system
#  when:
#    - (jenkins_check.stdout.find("DEPLOYED") == -1) or (jenkins_check.stdout.find("2.121.3-0217") == -1)


- name: ks-devops | Import ks-devops status
  shell: >
    {{ bin_dir }}/kubectl patch cc ks-installer
    --type merge
    -p '{"status": {"devops": {"status": "enabled", "enabledTime": "{{ lookup('pipe','date  +%Y-%m-%dT%H:%M:%S%Z') }}"}}}'
    -n kubesphere-system
  register: import
  failed_when: "import.stderr and 'Warning' not in import.stderr"
  until: import is succeeded
  retries: 5
  delay: 3
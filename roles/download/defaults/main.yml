---
local_release_dir: /tmp/releases

# Used to only evaluate vars from download role
skip_downloads: false

# if this is set to true will only download files once. Doesn't work
# on Container Linux by CoreOS unless the download_localhost is true and localhost
# is running another OS type. Default compress level is 1 (fastest).
download_run_once: False
download_compress: 1

# if this is set to true will download container
download_container: True

# if this is set to true, uses the localhost for download_run_once mode
# (requires docker and sudo to access docker). You may want this option for
# local caching of docker images or for Container Linux by CoreOS cluster nodes.
# Otherwise, uses the first node in the kube-master group to store images
# in the download_run_once mode.
download_localhost: False

# Always pull images if set to True. Otherwise check by the repo's tag/digest.
download_always_pull: False

# Some problems may occur when downloading files over https proxy due to ansible bug
# https://github.com/ansible/ansible/issues/32750. Set this variable to False to disable
# SSL validation of get_url module. Note that kubespray will still be performing checksum validation.
download_validate_certs: True

# Use the first kube-master if download_localhost is not set
download_delegate: "{% if download_localhost %}localhost{% else %}{{groups['kube-master'][0]}}{% endif %}"

# Arch of Docker images and needed packages
image_arch: "{{host_architecture | default('amd64')}}"

# Versions
kube_version: v1.15.5
etcd_version: v3.2.18

base_repo: >-
  {% if (local_registry is defined and local_registry == "registry.cn-beijing.aliyuncs.com") or (zone is defined and zone == "cn") -%}
  registry.cn-beijing.aliyuncs.com/
  {%- elif local_registry is defined and local_registry != "" -%}
  {{ local_registry }}/
  {%- else -%}

  {%- endif %}


base_library_repo: >-
  {% if (local_registry is defined and local_registry == "registry.cn-beijing.aliyuncs.com") or (zone is defined and zone == "cn") -%}
  {{ base_repo }}{{ namespace_override | default('kubesphereio') }}/
  {%- elif local_registry is defined and local_registry != "" -%}
  {{ base_repo }}library/
  {%- else -%}

  {%- endif %}


ks_version: >-
  {%- if dev_tag is defined and dev_tag != "" -%}
  {{ dev_tag }}
  {%- else -%}
  v3.1.1-rc.1
  {%- endif %}

# Containers
# In some cases, we need a way to set --registry-mirror or --insecure-registry for docker,
# it helps a lot for local private development or bare metal environment.
# So you need define --registry-mirror or --insecure-registry, and modify the following url address.
# example:
# You need to deploy Kubernetes cluster on local private development.
# Also provide the address of your own private registry.
# And use --insecure-registry options for docker

#KubeSphere:
ks_apiserver_repo: "{{ base_repo }}{{ namespace_override | default('kubespheredev') }}/ks-apiserver"
ks_apiserver_tag: "{{ ks_version }}"
ks_controller_manager_repo: "{{ base_repo }}{{ namespace_override | default('kubespheredev') }}/ks-controller-manager"
ks_controller_manager_tag: "{{ ks_version }}"
ks_update_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/ks-upgrade"
ks_update_tag: v3.0.0
ks_devops_migration_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/ks-devops"
ks_devops_migration_tag: "flyway-v3.0.0"
ks_alerting_migration_repo: "{{ base_repo }}{{ namespace_override | default('kubespheredev') }}/ks-alerting-migration"
ks_alerting_migration_tag: "v3.1.0"
ks_console_repo: "{{ base_repo }}{{ namespace_override | default('kubespheredev') }}/ks-console"
ks_console_tag: "{{ ks_version }}"
ks_kubectl_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/kubectl"
ks_kubectl_tag: v1.0.0
# kubectl versions
ks_kubectl_versions:
  v1.20.0: v1.20.0
  v1.19.0: v1.19.1
  v1.18.0: v1.18.0
  v1.17.0: v1.17.0
  v1.16.0: v1.16.0
  v1.15.0: v1.0.0

ks_image_pull_policy: Always
# ks_image_pull_policy: IfNotPresent

#ks-notification
notification_flyway_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/notification"
notification_flyway_tag: "flyway_v2.1.2"
notification_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/notification"
notification_tag: "v2.1.2"
alerting_dbinit_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/alerting-dbinit"
alerting_dbinit_tag: "v3.0.0"
ks_alerting_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/alerting"
ks_alerting_tag: "v2.1.2"
ks_alerting_adapter_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/alert-adapter"
ks_alerting_adapter_tag: "v3.0.0"

# kubefed, KubeSphere multiple cluster component
kubefed_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}"
kubefed_image: kubefed
kubefed_image_tag: v0.8.1
tower_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}"
tower_image: tower
tower_image_tag: "v0.2.0"
post_install_job_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}"
post_install_job_image: kubectl
post_install_job_tag: "v1.19.1"

# kubeedge
cloudcore_repo: "{{ base_repo }}{{ namespace_override | default('kubeedge') }}/cloudcore"
cloudcore_tag: "v1.7.2"
edge_watcher_repo: "{{ base_repo }}{{ namespace_override | default('kubespheredev') }}/edge-watcher"
edge_watcher_tag: "v0.1.1"
edge_watcher_agent_repo: "{{ base_repo }}{{ namespace_override | default('kubespheredev') }}/edge-watcher-agent"
edge_watcher_agent_tag: "v0.1.0"

# gatekeeper
gatekeeper_repo: "{{ base_repo }}{{ namespace_override | default('openpolicyagent') }}/gatekeeper"
gatekeeper_release: "v3.5.2"

#openpitrix:
openpitrix_job_tag: "v3.1.1"
openpitrix_job_repo: "{{ base_repo }}{{ namespace_override | default('kubespheredev') }}/openpitrix-jobs"

minio_repo: "{{ base_repo }}{{ namespace_override | default('minio') }}/minio"
minio_tag: RELEASE.2019-08-07T01-59-21Z
mc_repo: "{{ base_repo }}{{ namespace_override | default('minio') }}/mc"
mc_tag: RELEASE.2019-08-07T23-14-43Z

#ks-hostnic
snapshot_controller_repo: "{{ base_repo }}{{ namespace_override | default('csiplugin') }}/snapshot-controller"
snapshot_controller_tag: "v4.0.0"

# ks-devops
ks_devops_registry: "{{ base_repo }}{{ namespace_override | default('kubespheredev') }}"
ks_devops_controller_tag: "{{ ks_version }}"
ks_devops_apiserver_tag: "{{ ks_version }}"
ks_devops_tools_tag: "{{ ks_version }}"

#jenkins:
jenkins_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/ks-jenkins"
jenkins_tag: 2.249.1
jnlp_slave_repo: "{{ base_repo }}{{ namespace_override | default('jenkins') }}/jnlp-slave"
jnlp_slave_tag: 3.27-1

builder_registry: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}"
builder_base_tag: v3.1.0
builder_nodejs_tag: v3.1.0
builder_maven_tag: v3.1.0
builder_go_tag: v3.1.0

#s2i
s2i_registry: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}"
s2ioperator_tag: "v3.1.0"
s2irun_tag: "v2.1.1"
s2itemplates_tag: "v2.1.0"

#ks-monitor:
configmap_reload_repo: "{{ base_repo }}{{ namespace_override | default('jimmidyson') }}/configmap-reload"
configmap_reload_tag: v0.3.0
prometheus_repo: "{{ base_repo }}{{ namespace_override | default('prom') }}/prometheus"
prometheus_tag: v2.26.0
prometheus_config_reloader_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/prometheus-config-reloader"
prometheus_config_reloader_tag: v0.42.1
prometheus_operator_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/prometheus-operator"
prometheus_operator_tag: v0.42.1
kube_rbac_proxy_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/kube-rbac-proxy"
kube_rbac_proxy_tag: v0.8.0
kube_state_metrics_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/kube-state-metrics"
kube_state_metrics_tag: v1.9.7
node_exporter_repo: "{{ base_repo }}{{ namespace_override | default('prom') }}/node-exporter"
node_exporter_tag: v0.18.1
prometheus_adapter_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/k8s-prometheus-adapter-amd64"
prometheus_adapter_tag: v0.6.0
alertmanager_repo: "{{ base_repo }}{{ namespace_override | default('prom') }}/alertmanager"
alertmanager_tag: v0.21.0
thanos_repo: "{{ base_repo }}{{ namespace_override | default('thanosio') }}/thanos"
thanos_tag: v0.18.0
grafana_repo: "{{ base_repo }}{{ namespace_override | default('grafana') }}/grafana"
grafana_tag: 7.4.3

#notification-manager
notification_manager_operator_proxy_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/kube-rbac-proxy"
notification_manager_operator_proxy_tag: v0.8.0
notification_manager_operator_repo: "{{ base_repo }}{{ namespace_override | default('kubespheredev') }}/notification-manager-operator"
notification_manager_operator_tag: v1.3.0
notification_manager_repo: "{{ base_repo }}{{ namespace_override | default('kubespheredev') }}/notification-manager"
notification_manager_tag: v1.3.0
notification_tenant_sidecar_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/notification-tenant-sidecar"
notification_tenant_sidecar_tag: v3.1.0

#ks-logger
docker_elasticsearch_curator_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/elasticsearch-curator"
docker_elasticsearch_curator_tag: v5.7.6
elasticsearch_oss_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/elasticsearch-oss"
elasticsearch_oss_tag: 6.7.0-1
fluentbit_operator_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/fluentbit-operator"
fluentbit_operator_tag: v0.11.0
docker_repo: "{{ base_library_repo }}docker"
docker_tag: 19.03
ks_fluent_bit_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/fluent-bit"
ks_fluent_bit_tag: "v1.8.3"
ks_log_sidecar_injector_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/log-sidecar-injector"
ks_log_sidecar_injector_tag: 1.1
filebeat_repo: "{{ base_repo }}{{ namespace_override | default('elastic') }}/filebeat"
filebeat_tag: 6.7.0

#ks-events
kube_events_operator_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/kube-events-operator"
kube_events_operator_tag: v0.1.0
kube_events_exporter_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/kube-events-exporter"
kube_events_exporter_tag: v0.1.0
kube_events_ruler_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/kube-events-ruler"
kube_events_ruler_tag: v0.2.0

#ks-auditing
auditing_operator_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/kube-auditing-operator"
auditing_operator_tag: v0.2.0
auditing_webhook_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/kube-auditing-webhook"
auditing_webhook_tag: v0.2.0

#ingress:
nginx_ingress_controller_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/nginx-ingress-controller"
nginx_ingress_controller_tag: v0.35.0
defaultbackend_repo: "{{ base_repo }}{{ namespace_override | default('mirrorgooglecontainers') }}/defaultbackend-amd64"
defaultbackend_tag: 1.4

#metrics:
metrics_server_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/metrics-server"
metrics_server_tag: v0.4.2

#istio
istio_hub: "{{ base_repo }}{{ namespace_override | default('istio') }}"
istio_tag: 1.6.10
jaeger_operator_repo: "{{ base_repo }}{{ namespace_override | default('jaegertracing') }}/jaeger-operator"
jaeger_operator_tag: 1.17.1
jaeger_agent_repo: "{{ base_repo }}{{ namespace_override | default('jaegertracing') }}/jaeger-agent"
jaeger_agent_tag: 1.17
jaeger_collector_repo: "{{ base_repo }}{{ namespace_override | default('jaegertracing') }}/jaeger-collector"
jaeger_collector_tag: 1.17
jaeger_query_repo: "{{ base_repo }}{{ namespace_override | default('jaegertracing') }}/jaeger-query"
jaeger_query_tag: 1.17
jaeger_es_cleaner_repo: "{{ base_repo }}{{ namespace_override | default('jaegertracing') }}/jaeger-es-index-cleaner"
jaeger_es_cleaner_tag: 1.17
kiali_operator_repo: "{{ base_repo }}{{ namespace_override | default('kubespheredev') }}/kiali-operator"
kiali_operator_tag: v1.26.1
kiali_repo: "{{ base_repo }}{{ namespace_override | default('kubespheredev') }}/kiali"
kiali_tag: v1.24

#base:
redis_repo: "{{ base_library_repo }}redis"
redis_tag: 5.0.12-alpine
haproxy_repo: "{{ base_library_repo }}haproxy"
haproxy_tag: 2.0.22-alpine
busybox_repo: "{{ base_library_repo }}alpine"
busybox_tag: 3.14
etcd_image_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/etcd"
etcd_image_tag: "{{ etcd_version }}{%- if image_arch != 'amd64' -%}-{{ image_arch }}{%- endif -%}"
mysql_repo: "{{ base_library_repo }}mysql"
mysql_tag: 8.0.11
xtrabackup_repo: "{{ base_repo }}{{ namespace_override | default('googlecontainer') }}/xtrabackup"
xtrabackup_tag: 1.0
nginx_repo: "{{ base_library_repo }}nginx"
nginx_tag: 1.14-alpine
postgres_repo: "{{ base_library_repo }}postgres"
postgres_tag: 9.6.8 #Notice
openldap_repo: "{{ base_repo }}{{ namespace_override | default('osixia') }}/openldap"
openldap_tag: 1.3.0
wget_repo: "{{ base_repo }}{{ namespace_override | default('joosthofman') }}/wget"
wget_tag: 1.0

#VPA:
vpa_version: 0.5.0
vpa_admission_controller_repo: dockerhub.qingcloud.com/google_containers/vpa-admission-controller
vpa_admission_controller_tag: "{{ vpa_version }}"
vpa_recommender_repo: dockerhub.qingcloud.com/google_containers/vpa-recommender
vpa_recommender_tag: "{{ vpa_version }}"
vpa_updater_repo: dockerhub.qingcloud.com/google_containers/vpa-updater
vpa_updater_tag: "{{ vpa_version }}"

#examples-bookinfo
examples_bookinfo_version: 1.16.2
examples_ratings_version: 1.16.3
bookinfo_productpage_v1_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/examples-bookinfo-productpage-v1"
bookinfo_productpage_v1_tag: "{{ examples_bookinfo_version }}"
bookinfo_reviews_v1_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/examples-bookinfo-reviews-v1"
bookinfo_reviews_v1_tag: "{{ examples_bookinfo_version }}"
bookinfo_reviews_v2_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/examples-bookinfo-reviews-v2"
bookinfo_reviews_v2_tag: "{{ examples_bookinfo_version }}"
bookinfo_details_v1_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/examples-bookinfo-details-v1"
bookinfo_details_v1_tag: "{{ examples_bookinfo_version }}"
bookinfo_ratings_v1_repo: "{{ base_repo }}{{ namespace_override | default('kubesphere') }}/examples-bookinfo-ratings-v1"
bookinfo_ratings_v1_tag: "{{ examples_ratings_version }}"

#wave-scope
waveworks_scop_repo: "{{ base_repo }}{{ namespace_override | default('weaveworks') }}/scope"
waveworks_scop_tag: "1.13.0"

downloads:
  ks_installer:
    enabled: true
    container: true
    repo: "{{ks_installer_repo }}"
    tag: "{{ ks_installer_tag }}"
    sha256: "{{ ks_installer|default(None) }}"
    groups:
      - k8s-cluster

  busybox:
    enabled: true
    container: true
    repo: "{{ busybox_repo }}"
    tag: "{{ busybox_tag }}"
    sha256: "{{ busybox_checksum|default(None) }}"
    groups:
      - k8s-cluster

  mysql:
    enabled: true
    container: true
    repo: "{{ mysql_repo }}"
    tag: "{{ mysql_tag }}"
    sha256: "{{ mysql_checksum|default(None) }}"
    groups:
      - k8s-cluster

  #  xtrabackup:
  #    enabled: true
  #    container: true
  #    repo: "{{ xtrabackup_repo }}"
  #    tag: "{{ xtrabackup_tag }}"
  #    sha256: "{{ xtrabackup_checksum|default(None) }}"
  #    groups:
  #      - k8s-cluster

  redis:
    enabled: true
    container: true
    repo: "{{ redis_repo }}"
    tag: "{{ redis_tag }}"
    sha256: "{{ redis_checksum|default(None) }}"
    groups:
      - k8s-cluster

  haproxy:
    enabled: true
    container: true
    repo: "{{ haproxy_repo }}"
    tag: "{{ haproxy_tag }}"
    sha256: "{{ haproxy_checksum|default(None) }}"
    groups:
      - k8s-cluster

  nginx:
    enabled: "true"
    container: true
    repo: "{{ nginx_repo }}"
    tag: "{{ nginx_tag }}"
    sha256: "{{ nginx_checksum|default(None) }}"
    groups:
      - kube-node

  metrics_server:
    enabled: "{{ metrics_server_enabled }}"
    container: true
    repo: "{{ metrics_server_repo }}"
    tag: "{{ metrics_server_tag }}"
    sha256: "{{ metrics_server_checksum|default(None) }}"
    groups:
      - kube-node

  postgres:
    enabled: "{{ devops_enabled }}"
    container: true
    repo: "{{ postgres_repo }}"
    tag: "{{ postgres_tag }}"
    sha256: "{{ postgres_checksum|default(None) }}"
    groups:
      - kube-node

  alerting_dbinit:
    enabled: "{{ alerting_enabled }}"
    container: true
    repo: "{{ alerting_dbinit_repo }}"
    tag: "{{ alerting_dbinit_tag }}"
    sha256: "{{ alerting_dbinit_checksum|default(None) }}"
    groups:
      - kube-node

  ks_apiserver:
    enabled: true
    container: true
    repo: "{{ ks_apiserver_repo }}"
    tag: "{{ ks_apiserver_tag }}"
    sha256: "{{ ks_apiserver_checksum|default(None) }}"
    groups:
      - kube-master

  ks_devops_flyway:
    enabled: "{{ devops_enabled }}"
    container: true
    repo: "{{ ks_devops_flyway_repo }}"
    tag: "{{ ks_devops_flyway_tag }}"
    sha256: "{{ ks_devops_flyway_checksum|default(None) }}"
    groups:
      - kube-node

  ks_console:
    enabled: true
    container: true
    repo: "{{ ks_console_repo }}"
    tag: "{{ ks_console_tag }}"
    sha256: "{{ ks_console_checksum|default(None) }}"
    groups:
      - kube-master

  openldap:
    enabled: true
    container: true
    repo: "{{ openldap_repo }}"
    tag: "{{ openldap_tag }}"
    sha256: "{{ openldap_checksum|default(None) }}"
    groups:
      - k8s-cluster

  jenkins_uc:
    enabled: "{{ devops_enabled }}"
    container: true
    repo: "{{ jenkins_uc_repo }}"
    tag: "{{ jenkins_uc_tag }}"
    sha256: "{{ jenkins_uc_checksum|default(None) }}"
    groups:
      - kube-node

  jenkins:
    enabled: "{{ devops_enabled }}"
    container: true
    repo: "{{ jenkins_repo }}"
    tag: "{{ jenkins_tag }}"
    sha256: "{{ jenkins_checksum|default(None) }}"
    groups:
      - kube-node

  csi_provisioner:
    enabled: "{{ qingcloud_csi_enabled | default(false) }}"
    container: true
    repo: "{{ csi_provisioner_repo }}"
    tag: "{{ csi_provisioner_tag }}"
    sha256: "{{ csi_provisioner_checksum|default(None) }}"
    groups:
      - kube-node

  csi_attacher:
    enabled: "{{ qingcloud_csi_enabled | default(false) }}"
    container: true
    repo: "{{ csi_attacher_repo }}"
    tag: "{{ csi_attacher_tag }}"
    sha256: "{{ csi_attacher_checksum|default(None) }}"
    groups:
      - kube-node

  csi_qingcloud:
    enabled: "{{ qingcloud_csi_enabled | default(false) }}"
    container: true
    repo: "{{ csi_qingcloud_repo }}"
    tag: "{{ csi_qingcloud_tag }}"
    sha256: "{{ csi_qingcloud_checksum|default(None) }}"
    groups:
      - kube-node

  driver_registrar:
    enabled: "{{ qingcloud_csi_enabled | default(false) }}"
    container: true
    repo: "{{ driver_registrar_repo }}"
    tag: "{{ driver_registrar_tag }}"
    sha256: "{{ driver_registrar_checksum|default(None) }}"
    groups:
      - kube-node

  csi_snapshotter:
    enabled: "{{ qingcloud_csi_enabled | default(false) }}"
    container: true
    repo: "{{ csi_snapshotter_repo }}"
    tag: "{{ csi_snapshotter_tag }}"
    sha256: "{{ csi_snapshotter_checksum|default(None) }}"
    groups:
      - kube-node

  csi_resizer:
    enabled: "{{ qingcloud_csi_enabled | default(false) }}"
    container: true
    repo: "{{ csi_resizer_repo }}"
    tag: "{{ csi_resizer_tag }}"
    sha256: "{{ csi_resizer_checksum|default(None) }}"
    groups:
      - kube-node

  neonsan_driver_registrar:
    enabled: "{{ neonsan_csi_enabled | default(false) }}"
    container: true
    repo: "{{ neonsan_driver_registrar_repo }}"
    tag: "{{ neonsan_driver_registrar_tag }}"
    sha256: "{{ neonsan_driver_registrar_checksum|default(None) }}"
    groups:
      - kube-node

  csi_neonsan:
    enabled: "{{ neonsan_csi_enabled | default(false) }}"
    container: true
    repo: "{{ csi_neonsan_repo }}"
    tag: "{{ csi_neonsan_tag }}"
    sha256: "{{ csi_neonsan_checksum|default(None) }}"
    groups:
      - kube-node

  neonsan_csi_provisioner:
    enabled: "{{ neonsan_csi_enabled | default(false) }}"
    container: true
    repo: "{{ neonsan_csi_provisioner_repo }}"
    tag: "{{ neonsan_csi_provisioner_tag }}"
    sha256: "{{ neonsan_csi_provisioner_checksum|default(None) }}"
    groups:
      - kube-node

  neonsan_csi_attacher:
    enabled: "{{ neonsan_csi_enabled | default(false) }}"
    container: true
    repo: "{{ neonsan_csi_attacher_repo }}"
    tag: "{{ neonsan_csi_attacher_tag }}"
    sha256: "{{ neonsan_csi_attacher_checksum|default(None) }}"
    groups:
      - kube-node

  neonsan_csi_snapshotter:
    enabled: "{{ neonsan_csi_enabled | default(false) }}"
    container: true
    repo: "{{ neonsan_csi_snapshotter_repo }}"
    tag: "{{ neonsan_csi_snapshotter_tag }}"
    sha256: "{{ neonsan_csi_snapshotter_checksum|default(None) }}"
    groups:
      - kube-node

  nfs_client_provisioner:
    enabled: "{{ nfs_client_enabled }}"
    container: true
    repo: "{{ nfs_client_provisioner_repo }}"
    tag: "{{ nfs_client_provisioner_tag }}"
    sha256: "{{ nfs_client_provisioner_checksum|default(None) }}"
    groups:
      - kube-node

  jnlp_slave:
    enabled: "{{ devops_enabled }}"
    container: true
    repo: "{{ jnlp_slave_repo }}"
    tag: "{{ jnlp_slave_tag }}"
    sha256: "{{ jnlp_slave_checksum|default(None) }}"
    groups:
      - kube-node

  builder_base:
    enabled: "{{ devops_enabled }}"
    container: true
    repo: "{{ builder_base_repo }}"
    tag: "{{ builder_base_tag }}"
    sha256: "{{ builder_base_checksum|default(None) }}"
    groups:
      - kube-node

  builder_nodejs:
    enabled: "{{ devops_enabled }}"
    container: true
    repo: "{{ builder_nodejs_repo }}"
    tag: "{{ builder_nodejs_tag }}"
    sha256: "{{ builder_nodejs_checksum|default(None) }}"
    groups:
      - kube-node

  builder_maven:
    enabled: "{{ devops_enabled }}"
    container: true
    repo: "{{ builder_maven_repo }}"
    tag: "{{ builder_maven_tag }}"
    sha256: "{{ builder_maven_checksum|default(None) }}"
    groups:
      - kube-node

  builder_go:
    enabled: "{{ devops_enabled }}"
    container: true
    repo: "{{ builder_go_repo }}"
    tag: "{{ builder_go_tag }}"
    sha256: "{{ builder_go_checksum|default(None) }}"
    groups:
      - kube-node

  sonarqube:
    enabled: "{{ devops_enabled }}"
    container: true
    repo: "{{ sonarqube_repo }}"
    tag: "{{ sonarqube_tag }}"
    sha256: "{{ sonarqube_checksum|default(None) }}"
    groups:
      - kube-node

  fluentbit_operator:
    enabled: "{{ logging_enabled }}"
    container: true
    repo: "{{ fluentbit_operator_repo }}"
    tag: "{{ fluentbit_operator_tag }}"
    sha256: "{{ fluentbit_operator|default(None) }}"
    groups:
      - kube-node

  vpa_admission_controller:
    enabled: false
    container: true
    repo: "{{ vpa_admission_controller_repo }}"
    tag: "{{ vpa_admission_controller_tag }}"
    sha256: "{{ vpa_admission_controller|default(None) }}"
    groups:
      - kube-node

  vpa_recommender:
    enabled: false
    container: true
    repo: "{{ vpa_recommender_repo }}"
    tag: "{{ vpa_recommender_tag }}"
    sha256: "{{ vpa_recommender|default(None) }}"
    groups:
      - kube-node

  vpa_updater:
    enabled: false
    container: true
    repo: "{{ vpa_updater_repo }}"
    tag: "{{ vpa_updater_tag }}"
    sha256: "{{ vpa_updater|default(None) }}"
    groups:
      - kube-node
      -
  openebs_provisioner:
    enabled: true
    container: true
    repo: "{{ openebs_provisioner_localpv_repo }}"
    tag: "{{ openebs_provisioner_localpv_tag }}"
    sha256: "{{ openebs_provisioner|default(None) }}"
    groups:
      - kube-cluster

  openebs_openebs_tools:
    enabled: true
    container: true
    repo: "{{ openebs_openebs_tools_repo }}"
    tag: "{{ openebs_openebs_tools_tag }}"
    sha256: "{{ openebs_openebs_tools|default(None) }}"
    groups:
      - kube-cluster

  openebs_node_disk_manager_amd64:
    enabled: true
    container: true
    repo: "{{ openebs_node_disk_manager_amd64_repo }}"
    tag: "{{ openebs_node_disk_manager_amd64_tag }}"
    sha256: "{{ openebs_node_disk_manager_amd64|default(None) }}"
    groups:
      - kube-cluster

  openebs_node_disk_operator_amd64:
    enabled: true
    container: true
    repo: "{{ openebs_node_disk_operator_amd64_repo }}"
    tag: "{{ openebs_node_disk_operator_amd64_tag }}"
    sha256: "{{ openebs_node_disk_operator_amd64|default(None) }}"
    groups:
      - kube-cluster

  openebs_linux_utils:
    enabled: true
    container: true
    repo: "{{ openebs_linux_utils_repo }}"
    tag: "{{ openebs_linux_utils_tag }}"
    sha256: "{{ openebs_linux_utils|default(None) }}"
    groups:
      - kube-cluster

  nginx_photon:
    enabled: "{{ harbor_enabled | default(false) }}"
    container: true
    repo: "{{ nginx_photon_repo }}"
    tag: "{{ nginx_photon_tag }}"
    sha256: "{{ nginx_photon|default(None) }}"
    groups:
      - kube-node

  chartmuseum_photon:
    enabled: "{{ harbor_enabled | default(false) }}"
    container: true
    repo: "{{ chartmuseum_photon_repo }}"
    tag: "{{ chartmuseum_photon_tag }}"
    sha256: "{{ chartmuseum_photon|default(None) }}"
    groups:
      - kube-node

  notary_server_photon:
    enabled: "{{ harbor_enabled | default(false) }}"
    container: true
    repo: "{{ notary_server_photon_repo }}"
    tag: "{{ notary_server_photon_tag }}"
    sha256: "{{ notary_server_photon|default(None) }}"
    groups:
      - kube-node

  harbor_registryctl:
    enabled: "{{ harbor_enabled | default(false) }}"
    container: true
    repo: "{{ harbor_registryctl_repo }}"
    tag: "{{ harbor_registryctl_tag }}"
    sha256: "{{ harbor_registryctl|default(None) }}"
    groups:
      - kube-node

  registry_photon:
    enabled: "{{ harbor_enabled | default(false) }}"
    container: true
    repo: "{{ registry_photon_repo }}"
    tag: "{{ registry_photon_tag }}"
    sha256: "{{ registry_photon|default(None) }}"
    groups:
      - kube-node

  harbor_jobservice:
    enabled: "{{ harbor_enabled | default(false) }}"
    container: true
    repo: "{{ harbor_jobservice_repo }}"
    tag: "{{ harbor_jobservice_tag }}"
    sha256: "{{ harbor_jobservice|default(None) }}"
    groups:
      - kube-node

  harbor_portal:
    enabled: "{{ harbor_enabled | default(false) }}"
    container: true
    repo: "{{ harbor_portal_repo }}"
    tag: "{{ harbor_portal_tag }}"
    sha256: "{{ harbor_portal|default(None) }}"
    groups:
      - kube-node

  harbor_db:
    enabled: "{{ harbor_enabled | default(false) }}"
    container: true
    repo: "{{ harbor_db_repo }}"
    tag: "{{ harbor_db_tag }}"
    sha256: "{{ harbor_db|default(None) }}"
    groups:
      - kube-node

  clair_photon:
    enabled: "{{ harbor_enabled | default(false) }}"
    container: true
    repo: "{{ clair_photon_repo }}"
    tag: "{{ clair_photon_tag }}"
    sha256: "{{ clair_photon|default(None) }}"
    groups:
      - kube-node

  notary_signer_photon:
    enabled: "{{ harbor_enabled | default(false) }}"
    container: true
    repo: "{{ notary_signer_photon_repo }}"
    tag: "{{ notary_signer_photon_tag }}"
    sha256: "{{ notary_signer_photon|default(None) }}"
    groups:
      - kube-node

  redis_photon:
    enabled: "{{ harbor_enabled | default(false) }}"
    container: true
    repo: "{{ redis_photon_repo }}"
    tag: "{{ redis_photon_tag }}"
    sha256: "{{ redis_photon|default(None) }}"
    groups:
      - kube-node

  harbor_core:
    enabled: "{{ harbor_enabled | default(false) }}"
    container: true
    repo: "{{ harbor_core_repo }}"
    tag: "{{ harbor_core_tag }}"
    sha256: "{{ harbor_core|default(None) }}"
    groups:
      - kube-node

download_defaults:
  container: false
  file: false
  repo: None
  tag: None
  enabled: false
  dest: None
  version: None
  url: None
  unarchive: false
  owner: kube
  mode: None

---
- name: ks-logging | Getting logging installation files
  copy:
    src: "fluentbit-operator"
    dest: "{{ kubesphere_dir }}/"


- name: ks-logging | Getting logging containerd or cri-o installation files
  copy:
    src: "fluentbit-operator-cri"
    dest: "{{ kubesphere_dir }}/"

- name: ks-logging | Getting Kubernetes Node info
  shell: |
    kubectl get node -ojson | jq '.items[0].status.nodeInfo.containerRuntimeVersion'
  register: node_container_runtime


- name: ks-logging | Setting container runtime of kubernetes
  set_fact:
    logging_container_runtime: "{{ node_container_runtime.stdout is search('docker://') | ternary('docker', 'containerd') }}"

- name: ks-logging | Setting container runtime of kubernetes
  set_fact:
    logging_container_runtime: "{{ node_container_runtime.stdout is search('containerd://') | ternary('containerd', 'crio') }}"
  when: logging_container_runtime == 'containerd'


- name: ks-logging | Checking fluent-bit migrating
  shell: >
    {{ bin_dir }}/kubectl get outputs.logging.kubesphere.io -n kubesphere-logging-system es -o jsonpath='{.metadata.name}'
  register: migrating_completed
  failed_when: false

- name: ks-logging | Creating es manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/fluentbit-operator/{{ item.file }}"
  with_items:
    - { name: custom-output-elasticsearch-logging, file: custom-output-elasticsearch-logging.yaml }
  when:
  - migrating_completed.rc != 0 or migrating_completed.stdout.find("es") == -1
  - "common.es is defined and common.es.enabled is defined and common.es.enabled"

- name: ks-logging | Creating opensearch manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/fluentbit-operator/{{ item.file }}"
  with_items:
    - { name: custom-output-opensearch-logging, file: custom-output-opensearch-logging.yaml }
  when: "common.opensearch is defined and common.opensearch.enabled is defined and common.opensearch.enabled"

- name: ks-logging | Creating input configuration
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/fluentbit-operator/{{ item.file }}"
  with_items:
    - { name: custom-input-logging, file: custom-input-logging.yaml }
    - { name: custom-input-systemd, file: custom-input-systemd.yaml }

- name: ks-logging | Apply fluent-bit operator custom resources
  shell: >
    {{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/fluentbit-operator

- name: ks-logging | Apply fluent-bit operator cri custom resources
  shell: >
    {{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/fluentbit-operator-cri
  when:
    - logging is defined and logging.enabled
    - logging_container_runtime == 'containerd' or logging_container_runtime == 'crio'


- import_tasks: logsidecar.yaml
  when:
    - logging is defined and logging.logsidecar is defined and logging.logsidecar.enabled is defined and logging.logsidecar.enabled

- import_tasks: opensearch-dashboard.yaml
  when:
    - common.opensearch.dashboard is defined and common.opensearch.dashboard.enabled is defined and common.opensearch.dashboard.enabled

- name: ks-logging | Importing logging status
  shell: >
    {{ bin_dir }}/kubectl patch cc ks-installer
    --type merge
    -p '{"status": {"logging": {"status": "enabled", "enabledTime": "{{ lookup('pipe','date  +%Y-%m-%dT%H:%M:%S%Z') }}"}}}'
    -n kubesphere-system
  register: cc_result
  failed_when: "cc_result.stderr and 'Warning' not in cc_result.stderr"
  until: cc_result is succeeded
  retries: 5
  delay: 3

- name: KubeSphere | Init Redis password
  block:
    - name: KubeSphere | Generet Random password
      set_fact:
        redis_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
    - name: KubeSphere | Creating Redis Password Secret
      shell: >
        {{ bin_dir }}/kubectl -n kubesphere-system create secret generic redis-secret --from-literal=auth={{redis_password}}
      register: secret
      failed_when: "secret.stderr and 'already exists' not in secret.stderr"

- name: KubeSphere | Deploying ha redis
  block:

    - name: KubeSphere | Getting redis installation files
      copy:
        src: "{{ item }}"
        dest: "{{ kubesphere_dir }}/"
      loop:
        - "redis-ha"


    - name: KubeSphere | Creating manifests
      template:
        src: "{{ item.file }}.j2"
        dest: "{{ kubesphere_dir }}/{{ item.file }}"
      with_items:
        - { name: custom-values-redis, file: custom-values-redis.yaml }


    - name: KubeSphere | Checking old redis status
      shell: >
        {{ bin_dir }}/kubectl get pod -n kubesphere-system  -l app=redis,tier=database,version=redis-4.0 | wc -l
      register: old_redis_exist


    - name: KubeSphere | Deleting and backup old redis svc
      shell: >
        {{ bin_dir }}/kubectl get svc -n kubesphere-system redis -o yaml > {{ kubesphere_dir }}/redis-svc-backup.yaml
        &&
        {{ bin_dir }}/kubectl delete svc -n kubesphere-system redis
      when:
        - old_redis_exist.stdout != "0"


    - name: KubeSphere | Deploying redis
      shell: >
        {{ bin_dir }}/helm upgrade --install ks-redis
        {{ kubesphere_dir }}/redis-ha
        -f {{ kubesphere_dir }}/custom-values-redis.yaml
        --set fullnameOverride=redis-ha
        --namespace kubesphere-system


#    - name: KubeSphere | Getting redis PodIp
#      shell: >
#        {{ bin_dir }}/kubectl get pod
#        -n kubesphere-system
#        -l  app=redis,tier=database,version=redis-4.0
#        -ojsonpath='{.items[0].status.podIP}'
#      register: redis_podIp
#      when:
#        - old_redis_exist.stdout != "0"
#
#
#    - import_tasks: redis-migration.yaml
#      when:
#        - old_redis_exist.stdout != "0"

  when:
    - common.redis.enableHA is defined and common.redis.enableHA


- name: KubeSphere | Deploying redis
  shell: >
    {{ bin_dir }}/kubectl -n kubesphere-system apply -f {{ kubesphere_dir }}/common/{{ item }}
  loop:
    - "redis.yaml"
  register: redis_result
  failed_when:
    - "redis_result.stderr and 'bound claims' not in redis_result.stderr"
    - "redis_result.stderr and 'is forbidden' not in redis_result.stderr"
  when:
    - (common.redis.enableHA is defined and not common.redis.enableHA) or (common.redis.enableHA is not defined)


- name: KubeSphere | Importing redis status
  shell: >
    {{ bin_dir }}/kubectl patch cc ks-installer
    --type merge
    -p '{"status": {"redis": {"status": "enabled", "enabledTime": "{{ lookup('pipe','date  +%Y-%m-%dT%H:%M:%S%Z') }}"}}}'
    -n kubesphere-system
  register: cc_result
  failed_when: "cc_result.stderr and 'Warning' not in cc_result.stderr"
  until: cc_result is succeeded
  retries: 5
  delay: 3
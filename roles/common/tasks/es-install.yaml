- name: Kubesphere | Getting elasticsearch and curator installation files
  copy:
    src: "elasticsearch"
    dest: "{{ kubesphere_dir }}/"


- name: Kubesphere | Creating custom manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/elasticsearch/{{ item.file }}"
  with_items:
    - { name: custom-values-elasticsearch, file: custom-values-elasticsearch.yaml }
    - { name: custom-values-elasticsearch-curator, file: custom-values-elasticsearch-curator.yaml }


# Update check
- block:
  - name: Kubesphere | Check elasticsearch data StatefulSet
    shell: >
      {{ bin_dir }}/kubectl get sts -n kubesphere-logging-system  | grep "elasticsearch-logging-data" | wc -l
    register: sts_number

  - name: Kubesphere | Check elasticsearch storageclass
    shell: >
      {{ bin_dir }}/kubectl get sts -n kubesphere-logging-system elasticsearch-logging-data -o yaml | grep "storageClassName" | wc -l
    register: sc_number

  - name: Kubesphere | Comment elasticsearch storageclass parameter
    shell: >
      sed -i 's/\(^.*storageClass:.*$\)/#\1/' {{ kubesphere_dir }}/custom-values-elasticsearch.yaml
    when:
      - sts_number.stdout != "0"
      - sc_number.stdout == "0"


# Deploy elasticsearch
- name: Kubesphere | Check elasticsearch
  shell: >
    {{ bin_dir }}/helm list elasticsearch-logging
  register: es_check
  ignore_errors: True


- block:
  - name: Kubesphere | Deploy elasticsearch-logging
    shell: >
      {{ bin_dir }}/helm upgrade --install elasticsearch-logging
      {{ kubesphere_dir }}/elasticsearch/elasticsearch-1.22.1.tgz
      -f {{ kubesphere_dir }}/elasticsearch/custom-values-elasticsearch.yaml
      --namespace kubesphere-logging-system
    register: es_result
    ignore_errors: True

  - name: Kubesphere | Get PersistentVolume Name
    shell: >
      kubectl get pv | grep "kubesphere-logging-system/data-elasticsearch-logging" | awk '{print $1}'
    register: es_pv_name
    when:
      - "es_result.stderr and 'no matches for kind' in es_result.stderr"

  - name: Kubesphere | Patch PersistentVolume (persistentVolumeReclaimPolicy)
    shell: >
      kubectl patch pv {{ item }}
      -p '{"spec":{"persistentVolumeReclaimPolicy": "Retain"}}'
    loop: "{{ es_pv_name.stdout_lines }}"
    when:
      - "es_result.stderr and 'no matches for kind' in es_result.stderr"

  - name: Kubesphere | Delete elasticsearch
    shell: >
      {{ bin_dir }}/helm del --purge elasticsearch-logging
    when:
      - "es_result.stderr and 'no matches for kind' in es_result.stderr"

  - name: Kubesphere | Waiting for seconds
    wait_for: timeout=20
    when:
      - "es_result.stderr and 'no matches for kind' in es_result.stderr"

  - name: Kubesphere | Deploy elasticsearch-logging
    shell: >
      {{ bin_dir }}/helm upgrade --install elasticsearch-logging
      {{ kubesphere_dir }}/elasticsearch/elasticsearch-1.22.1.tgz
      -f {{ kubesphere_dir }}/elasticsearch/custom-values-elasticsearch.yaml
      --namespace kubesphere-logging-system
    register: es_result
    when:
      - "es_result.stderr and 'no matches for kind' in es_result.stderr"

  - fail:
      msg: "{{ es_result.stderr }}"
    when:
      - es_result.stderr is defined
      - es_result.stderr != ""
      - es_result.stderr.find("no matches for kind") == -1

  when:
    - common.es.externalElasticsearchUrl is not defined
    - common.es.externalElasticsearchPort is not defined
    - (es_check.stdout.find("DEPLOYED") == -1) or (es_check.stdout.find("6.7.0-0217") == -1)

# Deploy elasticsearch curator
- block:
  - name: Kubesphere | Check elasticsearch-logging-curator
    shell: >
      {{ bin_dir }}/helm list elasticsearch-logging-curator
    register: curator_check
    ignore_errors: True


  - name: Kubesphere | Deploy elasticsearch-logging-curator
    shell: >
      {{ bin_dir }}/helm upgrade --install elasticsearch-logging-curator
      {{ kubesphere_dir }}/elasticsearch/elasticsearch-curator-1.3.3.tgz
      -f {{ kubesphere_dir }}/elasticsearch/custom-values-elasticsearch-curator.yaml
      --namespace kubesphere-logging-system
    when:
      - (curator_check.stdout.find("DEPLOYED") == -1) or (curator_check.stdout.find("5.5.4-0217") == -1)


# Update clusterconfig (cc) status
- name: Kubesphere | import es status
  shell: >
    {{ bin_dir }}/kubectl patch cc ks-installer
    --type merge
    -p '{"status": {"es": {"status": "enabled", "enabledTime": "{{ lookup('pipe','date  +%Y-%m-%dT%H:%M:%S%Z') }}"}}}'
    -n kubesphere-system
  register: import
  failed_when: "import.stderr and 'Warning' not in import.stderr"
  until: import is succeeded
  retries: 5
  delay: 3
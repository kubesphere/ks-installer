- name: KubeSphere | Getting elasticsearch and curator installation files
  copy:
    src: "elasticsearch"
    dest: "{{ kubesphere_dir }}/"


- name: KubeSphere | Creating custom manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/elasticsearch/{{ item.file }}"
  with_items:
    - { name: custom-values-elasticsearch, file: custom-values-elasticsearch.yaml }
    - { name: custom-values-elasticsearch-curator, file: custom-values-elasticsearch-curator.yaml }


# Update check
- block:
  - name: KubeSphere | Checking elasticsearch data StatefulSet
    shell: >
      {{ bin_dir }}/kubectl get sts -n kubesphere-logging-system  | grep "elasticsearch-logging-data" | wc -l
    register: sts_number

  - name: KubeSphere | Checking elasticsearch storageclass
    shell: >
      {{ bin_dir }}/kubectl get sts -n kubesphere-logging-system elasticsearch-logging-data -o yaml | grep "storageClassName" | wc -l
    register: sc_number

  - name: KubeSphere | Commenting elasticsearch storageclass parameter
    shell: >
      sed -i 's/\(^.*storageClass:.*$\)/#\1/' {{ kubesphere_dir }}/elasticsearch/custom-values-elasticsearch.yaml
    when:
      - sts_number.stdout != "0"
      - sc_number.stdout == "0"

# Creating elasticsearch-credentials secret used to connect external es with basic auth enabled.
- name: KubeSphere | Creating elasticsearch credentials secret
  shell: >
    {{ bin_dir }}/kubectl create secret generic elasticsearch-credentials --from-literal="username={{ common.es.basicAuth.username }}" --from-literal="password={{ common.es.basicAuth.password }}" --type=kubernetes.io/basic-auth -n kubesphere-logging-system
  register: secret
  failed_when: "secret.stderr and 'AlreadyExists' not in secret.stderr"
  until: secret is succeeded
  retries: 5
  delay: 10
  when:
    - "common.es.basicAuth.enabled is defined"
    - "common.es.basicAuth.enabled == true"
    - "common.es.basicAuth.password is defined and common.es.basicAuth.password != ''"
    - "common.es.basicAuth.username is defined and common.es.basicAuth.username != ''"

# Deploy elasticsearch
- name: KubeSphere | Checking internal es
  shell: >
    {{ bin_dir }}/kubectl get cm -n kubesphere-system kubesphere-config -o jsonpath='{.data.kubesphere\.yaml}' | grep "logging:" -A 2 | grep "host" | awk '{print $2}'
  register: es_host
  failed_when: false

- block:
  - name: KubeSphere | Deploying elasticsearch-logging
    shell: >
      {{ bin_dir }}/helm upgrade --install elasticsearch-logging
      {{ kubesphere_dir }}/elasticsearch/elasticsearch-1.22.1.tgz
      -f {{ kubesphere_dir }}/elasticsearch/custom-values-elasticsearch.yaml
      --namespace kubesphere-logging-system
    register: es_result
    failed_when: false

  - name: KubeSphere | Getting PersistentVolume Name
    shell: >
      kubectl get pv | grep "kubesphere-logging-system/data-elasticsearch-logging" | awk '{print $1}'
    register: es_pv_name
    when:
      - "es_result.stderr and 'no matches for kind' in es_result.stderr"

  - name: KubeSphere | Patching PersistentVolume (persistentVolumeReclaimPolicy)
    shell: >
      kubectl patch pv {{ item }}
      -p '{"spec":{"persistentVolumeReclaimPolicy": "Retain"}}'
    loop: "{{ es_pv_name.stdout_lines }}"
    when:
      - "es_result.stderr and 'no matches for kind' in es_result.stderr"

  - name: KubeSphere | Deleting elasticsearch
    shell: >
      {{ bin_dir }}/helm del elasticsearch-logging -n kubesphere-logging-system
    when:
      - "es_result.stderr and 'no matches for kind' in es_result.stderr"

  - name: KubeSphere | Waiting for seconds
    wait_for: timeout=20
    when:
      - "es_result.stderr and 'no matches for kind' in es_result.stderr"

  - name: KubeSphere | Deploying elasticsearch-logging
    shell: >
      {{ bin_dir }}/helm upgrade --install elasticsearch-logging
      {{ kubesphere_dir }}/elasticsearch/elasticsearch-1.22.1.tgz
      -f {{ kubesphere_dir }}/elasticsearch/custom-values-elasticsearch.yaml
      --namespace kubesphere-logging-system
    register: es_result
    when:
      - "es_result.stderr and 'no matches for kind' in es_result.stderr"

  # Update clusterconfig (cc) status
  - name: KubeSphere | Importing es status
    shell: >
      {{ bin_dir }}/kubectl patch cc ks-installer
      --type merge
      -p '{"status": {"es": {"status": "enabled", "enabledTime": "{{ lookup('pipe','date  +%Y-%m-%dT%H:%M:%S%Z') }}"}}}'
      -n kubesphere-system
    register: import
    failed_when: "import.stderr and 'Warning' not in import.stderr"
    until: import is succeeded
    retries: 5
    delay: 3

  when:
    - common.es.externalElasticsearchUrl is not defined or (common.es.externalElasticsearchUrl is defined and common.es.externalElasticsearchUrl == "")
    - common.es.externalElasticsearchPort is not defined or (common.es.externalElasticsearchPort is defined and common.es.externalElasticsearchPort == "")
    - es_host.stdout is defined
    - es_host.stdout == "" or es_host.stdout == "http://elasticsearch-logging-data.kubesphere-logging-system.svc:9200"



# Deploy elasticsearch curator
- block:
  # - name: KubeSphere | Checking elasticsearch-logging-curator
  #   shell: >
  #     {{ bin_dir }}/helm list elasticsearch-logging-curator
  #   register: curator_check
  #   ignore_errors: True


  - name: KubeSphere | Deploying elasticsearch-logging-curator
    shell: >
      {{ bin_dir }}/helm upgrade --install elasticsearch-logging-curator
      {{ kubesphere_dir }}/elasticsearch/elasticsearch-curator-1.3.3.tgz
      -f {{ kubesphere_dir }}/elasticsearch/custom-values-elasticsearch-curator.yaml
      --namespace kubesphere-logging-system
    # when:
    #   - (curator_check.stdout.find("DEPLOYED") == -1) or (curator_check.stdout.find("5.5.4-0217") == -1)

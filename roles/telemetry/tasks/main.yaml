---

- name: KubeSphere | Waiting for ks-console
  shell: "{{ bin_dir }}/kubectl get pod -n kubesphere-system -o wide | grep ks-console | awk '{print $3}'"
  register: result
  until: result.stdout.find("Running") != -1
  retries: 30
  delay: 30

- name: KubeSphere | Waiting for ks-apiserver
  shell: "{{ bin_dir }}/kubectl get pod -n kubesphere-system -o wide | grep ks-apiserver | awk '{print $3}'"
  register: result
  until: result.stdout.find("Running") != -1
  retries: 30
  delay: 30

- name: Get k8s version
  shell: >
     {{ bin_dir }}/kubectl get nodes | awk 'NR==2{print $5}'
  register: k8s
  ignore_errors: true

- name: Get ks version
  shell: >
     {{ bin_dir }}/kubectl get svc -n kubesphere-system ks-console -o=jsonpath='{.spec.selector.version}'
  register: ks
  ignore_errors: true

- name: Get firstip os
  shell: >
     {{ bin_dir }}/kubectl get node -o wide | awk '{if(NR == 2){print $8}}'
  register: firstipos
  ignore_errors: true

- name: Get machineID
  shell: >
    {{ bin_dir }}/kubectl get nodes `{{ bin_dir }}/kubectl get nodes | awk 'NR==2{print$1}'` -o=jsonpath='{.status.nodeInfo.machineID}'
  register: mID
  ignore_errors: true

- name: Get module
  shell: >
    {{ bin_dir }}/kubectl get cc -n kubesphere-system ks-installer -o json | jq '.status' | jq 'keys' | grep -v "clusterId" | jq 'join("-")'
  register: mod
  ignore_errors: true

- name: Get kube-system time
  shell: >
     {{ bin_dir }}/kubectl get ns | grep kube-system | awk '{print $3}'
  register: kubetime
  ignore_errors: true

- name: Get kubesphere-system time
  shell: >
     {{ bin_dir }}/kubectl get ns | grep kubesphere-system | awk '{print $3}'
  register: kubespheretime
  ignore_errors: true

- name: yes/no HA
  shell: >
     {{ bin_dir }}/kubectl get nodes | grep "master" | wc | awk '{print $1}'
  register: ha
  ignore_errors: true

- name: Get nodecount
  shell: >
     {{ bin_dir }}/kubectl get nodes | grep -v "NAME" | wc -l
  register: number
  ignore_errors: true

- name: Get clusterId by cm of kubesphere-config
  shell: >
     {{ bin_dir }}/kubectl get cc ks-installer -n kubesphere-system -o yaml | grep "clusterId"
  register: check
  ignore_errors: true

- name: KubeSphere | Creating KubeSphere clusterId
  shell: >
    uuidgen -r -t
  register: cluster
  when: check.stdout.find('clusterId') == -1
  ignore_errors: true

- name: clusterId patch to cm of kubesphere-config
  shell: >
     {{ bin_dir }}/kubectl patch cc ks-installer -n kubesphere-system --type merge -p '{"status": {"clusterId": "{{ cluster[ 'stdout' ] }}"}}'
  when: check.stdout.find('clusterId') == -1
  ignore_errors: true

- name: KubeSphere | KubeSphere clusterId
  set_fact:
    cluster_str: "{{ cluster.stdout}}"
  when: check.stdout.find('clusterId') == -1

- name: Get clusterId
  shell: >
     {{ bin_dir }}/kubectl get cc ks-installer -n kubesphere-system -o=jsonpath='{.status.clusterId}'
  register: cluster
  when: check.stdout.find('clusterId') != -1
  ignore_errors: true

- name: KubeSphere | KubeSphere clusterId
  set_fact:
    cluster_str: "{{ cluster.stdout}}"
  when: check.stdout.find('clusterId') != -1

- name: clusterId add ks
  shell: >
    echo "{{ cluster_str }}"
  register: clusterId
  ignore_errors: true

- name: Get multicluster status
  shell: >
    cat /kubesphere/config/ks-config.json | grep clusterRole | awk '{print $2}'
  register: multi
  ignore_errors: true 

- name: Get essential information
  uri:
    url: "https://kubesphere.io/log/?k8s={{ k8s[ 'stdout' ] }}&ks={{ ks[ 'stdout' ] }}&ha={{ ha[ 'stdout' ] }}&c={{ number[ 'stdout' ] }}&K8st={{ kubetime[ 'stdout' ] }}&Kst={{ kubespheretime[ 'stdout' ] }}&os={{ firstipos[ 'stdout' ] }}&mID={{ mID[ 'stdout' ] }}&clusterId={{ clusterId[ 'stdout' ] }}&mod={{ mod[ 'stdout' ] }}&multi={{ multi[ 'stdout' ] }}"
    method: GET
    validate_certs: false
  ignore_errors: true
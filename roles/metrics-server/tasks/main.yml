---

- name: Metrics-Server | Checking old installation files
  stat:
    path: "{{ kubesphere_dir }}/metrics-server/auth-reader.yaml"
  failed_when: false
  register: metrics_server_old_check


- name: Metrics-Server | deleting old metrics-server
  shell: "{{ bin_dir }}/kubectl delete -f {{ kubesphere_dir }}/metrics-server/"
  register: import
  failed_when: "import.stderr and 'NotFound' not in import.stderr"
  when: metrics_server_old_check.stat.exists


- name: Metrics-Server | deleting old metrics-server files
  file:
    path: "{{ kubesphere_dir }}/{{ item }}"
    state: absent
  failed_when: false
  loop:
    - "metrics-server"
  when: metrics_server_old_check


- name: Metrics-Server | Getting metrics-server installation files
  copy:
    src: "metrics-server"
    dest: "{{ kubesphere_dir }}/"


- name: Metrics-Server | Creating manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/metrics-server/{{ item.file }}"
  with_items:
    - { name: values, file: values.yaml, type: config }


- name: Metrics-Server | Check Metrics-Server
  shell: >
    {{ bin_dir }}/helm list -f metrics-server -n kube-system
  register: metrics_server_check
  failed_when: false

- block:
    - name: Metrics-Server | Installing metrics-server
      shell: >
        {{ bin_dir }}/helm upgrade --install metrics-server {{ kubesphere_dir }}/metrics-server  --namespace kube-system
      register: result
      failed_when: false


    - name: Metrics-Server | Installing metrics-server retry
      shell: >
        {{ bin_dir }}/helm del metrics-server -n kube-system &&
        sleep 5 &&
        {{ bin_dir }}/helm upgrade --install metrics-server {{ kubesphere_dir }}/metrics-server --namespace kube-system
      when:
        - result.rc != 0
  when:
    - (metrics_server_check.stdout.find("DEPLOYED") == -1) or (metrics_server_check.stdout.find("0.3.1-0217") == -1)

- name: Metrics-Server | Waitting for v1beta1.metrics.k8s.io ready
  shell: >
    {{ bin_dir }}/kubectl get apiservices v1beta1.metrics.k8s.io -o jsonpath='{.status.conditions[0].status}'
  register: metrics_health
  until: metrics_health.stdout.find("True") != -1
  retries: 60
  delay: 10


- name: Metrics-Server | import metrics-server status
  shell: >
    {{ bin_dir }}/kubectl patch cc ks-installer
    --type merge
    -p '{"status": {"metricsServer": {"status": "enabled", "enabledTime": "{{ lookup('pipe','date  +%Y-%m-%dT%H:%M:%S%Z') }}"}}}'
    -n kubesphere-system
  register: import
  failed_when: "import.stderr and 'Warning' not in import.stderr"
  until: import is succeeded
  retries: 5
  delay: 3
